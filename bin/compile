#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -x
set -o pipefail

function die() {
	echo "$@" >&2
	exit 1
}

# START CONFIG
NGINX_VERSION=1.4.4
NGINX_MD5='5dfaba1cbeae9087f3949860a02caa9f'
OPENSSL_VERSION=1.0.1e
OPENSSL_MD5='66bf6f10f060d561929de96f9dfe5b8c'
PCRE_VERSION=8.33
PCRE_MD5='21514018448ac10062ece7a668fca949'
# END CONFIG

NGINX_FILE=nginx-$NGINX_VERSION.tar.gz
NGINX_URL=http://nginx.org/download/$NGINX_FILE
NGINX_DIR=nginx-$NGINX_VERSION

OPENSSL_FILE=openssl-$OPENSSL_VERSION.tar.gz
OPENSSL_URL=https://www.openssl.org/source/$OPENSSL_FILE
OPENSSL_DIR=openssl-$OPENSSL_VERSION

PCRE_FILE=pcre-$PCRE_VERSION.tar.bz2
PCRE_URL=http://downloads.sourceforge.net/project/pcre/pcre/$PCRE_VERSION/$PCRE_FILE
PCRE_DIR=pcre-$PCRE_VERSION

#

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function download_url() {
  curl -s -S -O -L -m 300 --connect-timeout 60 "$1"
}

function check_md5() {
  md5sum "$1" 2>/dev/null | grep -q "^$2 "
}

function download() {
  if ! check_md5 "$2" "$3"; then
    download_url "$1"
    check_md5 "$2" "$3" || die "$2 bad"
  fi
}

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
NGINX_INSTALL_DIR="${BUILD_DIR}/vendor/nginx"

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${BUILD_DIR}/.profile.d

echo "-----> Installing Nginx"

# Nginx
if [ ! -d "${CACHE_DIR}/build/nginx" ]; then
  pushd "${CACHE_DIR}" >/dev/null
  
  # Get PCRE (needed by nginx)
  download "${PCRE_URL}" "${PCRE_FILE}" "${PCRE_MD5}"
  rm -rf "${PCRE_DIR}"
  tar xf "${PCRE_FILE}"

  # Get OpenSSL (needed by nginx because ubuntu's is OOOLD)
  download "${OPENSSL_URL}" "${OPENSSL_FILE}" "${OPENSSL_MD5}"
  rm -rf "${OPENSSL_DIR}"
  tar xf "${OPENSSL_FILE}"

  # Build Nginx
  download "${NGINX_URL}" "${NGINX_FILE}" "${NGINX_MD5}"
  rm -rf "${CACHE_DIR}/build/nginx" "${NGINX_DIR}"
  tar xf "${NGINX_FILE}"
  pushd "${NGINX_DIR}" >/dev/null
  ./configure --prefix="${NGINX_INSTALL_DIR}" \
    --conf-path="${NGINX_INSTALL_DIR}/conf" \
    --http-client-body-temp-path="/tmp/nginx/client_body_temp" \
    --http-proxy-temp-path="/tmp/nginx/proxy_temp" \
    --http-fastcgi-temp-path="/tmp/nginx/fastcgi_temp" \
    --http-uwsgi-temp-path="/tmp/nginx/uwsgi_temp" \
    --http-scgi-temp-path="/tmp/nginx/scgi_temp" \
    --with-pcre="${CACHE_DIR}/${PCRE_DIR}" \
    --with-pcre-opt='--enable-shared=NO --enable-jit --enable-utf --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-unicode-properties --disable-cpp --disable-dependency-tracking' \
    --with-openssl="${CACHE_DIR}/${OPENSSL_DIR}" \
    --with-openssl-opt='no-krb5 no-dso no-shared zlib' \
    --with-ipv6 \
    --with-http_ssl_module \
    --with-http_gzip_static_module \
    --with-http_geoip_module \
    --with-http_spdy_module 
  make || die 'nginx build failed'
  rm -rf "${NGINX_INSTALL_DIR}"
  make install || die 'nginx install failed'
  popd >/dev/null
  
  # cleanup
  rm -rf "${PCRE_DIR}"
  rm -rf "${OPENSSL_DIR}"
  rm -rf "${NGINX_DIR}"
  popd >/dev/null
fi

NGINX_INSTALLED_DIR=/app/vendor/nginx

export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${BUILD_DIR}/local/lib"

# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/nginx.conf.erb ${NGINX_INSTALL_DIR}/conf/nginx.conf.erb
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
#erb $LP_DIR/conf/nginx.conf.erb > ${BUILD_DIR}/vendor/nginx/conf/nginx.conf

echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Override config files if provided in app.
if [ -d /app/conf ]; then
  mkdir -p /app/conf/nginx.d

  if [ -r /app/conf/nginx.conf.erb ]; then
    cp -f /app/conf/nginx.conf.erb ${NGINX_INSTALLED_DIR}/conf/nginx.conf.erb
  fi
fi

# Set correct port variable.
erb ${NGINX_INSTALLED_DIR}/conf/nginx.conf.erb > ${NGINX_INSTALLED_DIR}/conf/nginx.conf

if [ -d /app/conf/nginx.d ]; then
  # Parse .erb into .conf.
  for f in /app/conf/nginx.d/*.erb; do
    if [ -r "\${f}" ]; then
      erb "\${f}" > "\${f}.conf"
    fi
  done
fi

mkdir -p ${NGINX_INSTALLED_DIR}/logs
touch ${NGINX_INSTALLED_DIR}/logs/access.log ${NGINX_INSTALLED_DIR}/logs/error.log
mkdir -p /tmp/nginx/{client_body_temp,fastcgi_temp,proxy_temp,scgi_temp,uwsgi_temp}
(tail -f -n 0 ${NGINX_INSTALL_DIR}/logs/*.log &)

EOF
