#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

function die() {
	echo "$@" >&2
	exit 1
}

# START CONFIG
NGINX_VERSION=1.4.4
NGINX_MD5='5dfaba1cbeae9087f3949860a02caa9f'
OPENSSL_VERSION=1.0.1e
OPENSSL_MD5='66bf6f10f060d561929de96f9dfe5b8c'
PCRE_VERSION=8.33
PCRE_MD5='21514018448ac10062ece7a668fca949'
# END CONFIG

NGINX_FILE=nginx-$NGINX_VERSION.tar.gz
NGINX_SOURCE_URL=http://nginx.org/download/$NGINX_FILE
NGINX_DIR=nginx-$NGINX_VERSION

OPENSSL_FILE=openssl-$OPENSSL_VERSION.tar.gz
OPENSSL_SOURCE_URL=https://www.openssl.org/source/$OPENSSL_FILE
OPENSSL_DIR=openssl-$OPENSSL_VERSION

PCRE_FILE=pcre-$PCRE_VERSION.tar.bz2
PCRE_SOURCE_URL=http://downloads.sourceforge.net/project/pcre/pcre/$PCRE_VERSION/$PCRE_FILE
PCRE_DIR=pcre-$PCRE_VERSION

#

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function download_url() {
  TARGET_URL="$1"
  curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

function check_md5() {
  md5sum "$1" | grep -q "^$2 "
}

function download() {
  if ! check_md5 "$2" "$3"; then
    download_url "$1"
    check_md5 "$2" "$3" || die "$2 bad"
  fi
}

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${BUILD_DIR}/.profile.d

echo "-----> Installing Nginx"

# Nginx
if [ ! -d "${CACHE_DIR}/build/nginx" ]; then
  pushd "${CACHE_DIR}" >/dev/null
  
  # PCRE (needed by nginx)
  rm -rf "${CACHE_DIR}/build/pcre"
  download "${PCRE_URL}" "${PCRE_FILE}" "${PCRE_MD5}"
  tar xf "${PCRE_FILE}"
  pushd "${PCRE_DIR}" >/dev/null
  ./configure --prefix="${CACHE_DIR}/build/pcre" \
    --enable-shared=NO \
    --enable-jit \
    --enable-utf \
    --enable-pcregrep-libz \
    --enable-pcregrep-libbz2 \
    --enable-unicode-properties \
    --disable-cpp \
    --disable-dependency-tracking
  make install  || {
    rm -rf "${CACHE_DIR}/build/pcre"
    die 'PCRE build failed'
  }
  popd >/dev/null

  # OpenSSL (needed by nginx because ubuntu's is OOOLD)
  rm -rf "${CACHE_DIR}/build/openssl"
  download "${OPENSSL_URL}" "${OPENSSL_FILE}" "${OPENSSL_MD5}"
  tar xf "${OPENSSL_FILE}"
  pushd "${OPENSSL_DIR}" >/dev/null
  ./config --prefix="${CACHE_DIR}/build/openssl" no-krb5 no-dso no-shared zlib
  make install || {
    rm -rf "${CACHE_DIR}/build/openssl"
    die 'OpenSSL build failed'
  }
  popd >/dev/null

  rm -rf "${CACHE_DIR}/build/nginx"
  download "${NGINX_URL}" "${NGINX_FILE}" "${NGINX_MD5}"
  tar xf "${NGINX_FILE}"
  pushd "${NGINX_DIR}" >/dev/null
  ./configure --prefix="${BUILD_DIR}" \
    --with-pcre="${CACHE_DIR}/build/pcre" \
    --with-ipv6 \
    --with-http_ssl_module \
    --with-http_gzip_static_module
  make install || {
    rm -rf "${CACHE_DIR}/build/nginx"
    die 'nginx build failed'
  }
  popd >/dev/null
  
  # cleanup
  rm -rf "${CACHE_DIR}/build/pcre"
  rm -rf "${CACHE_DIR}/build/openssl"
  rm -f "${NGINX_FILE}"
  popd >/dev/null
fi

mkdir -p ${BUILD_DIR}/vendor/nginx
tar xzf ${NGINX_FILE} -C ${BUILD_DIR}/vendor/nginx

export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${BUILD_DIR}/local/lib"



# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
#erb $LP_DIR/conf/nginx.conf.erb > ${BUILD_DIR}/vendor/nginx/conf/nginx.conf

echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Override config files if provided in app.
if [ -d /app/conf ]; then
  mkdir -p /app/conf/nginx.d

  if [ -d /app/conf/etc.d ]; then
    cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
  fi

  if [ -r /app/conf/nginx.conf.erb ]; then
    cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
  fi
fi

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

if [ -d /app/conf/nginx.d ]; then
  # Parse .erb into .conf.
  for f in /app/conf/nginx.d/*.erb; do
    if [ -r "\${f}" ]; then
      erb "\${f}" > "\${f}.conf"
    fi
  done
fi


touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log &)

